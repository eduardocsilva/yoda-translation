{"version":3,"sources":["images/yoda.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","height","maxWidth","marginBottom","padding","input","borderRadius","color","backgroundColor","marginRight","marginLeft","paddingRight","paddingLeft","App","classes","useState","englishText","setEnglishText","yodaText","setYodaText","executeTranslation","e","a","getTranslation","translatedText","axios","post","URLSearchParams","text","then","res","data","contents","translated","catch","err","className","id","src","yodaPng","alt","TextField","label","placeholder","value","variant","size","onChange","userText","target","multiline","rows","InputProps","disableUnderline","readOnly","Button","component","onClick","Date","getFullYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAAe,G,MAAA,IAA0B,kC,QCQnCA,EAAYC,YAAW,CACzBC,KAAM,CACFC,MAAO,IACPC,OAAQ,IACRC,SAAU,OACVC,aAAc,GACdC,QAAS,IAEbC,MAAO,CACHC,aAAc,OACdN,MAAO,QACPO,MAAO,OACP,4CAA6C,CACzCC,gBAAiB,uBAErB,KAAM,CACFL,aAAc,OACdM,YAAa,OACbC,WAAY,OACZC,aAAc,OACdC,YAAa,WA0FVC,MArFf,WACI,IAAMC,EAAUjB,IAGhB,EAAsCkB,mBAAc,IAApD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,mBAAc,IAA9C,mBAAOG,EAAP,KAAiBC,EAAjB,KAQMC,EAAkB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACMC,EAAeP,GADrB,OACjBQ,EADiB,OAEvBL,EAAYK,GAFW,2CAAH,sDAKlBD,EAAiB,SAACP,GACpB,OAAOS,IACFC,KAAK,wBAA0B,IAAIC,gBAAgB,CAAEC,KAAMZ,IAAgB,CAAEY,KAAMZ,IACnFa,MAAK,SAACC,GAAD,OAAcA,EAAIC,KAAKC,SAASC,cACrCC,OAAM,SAACC,GAAD,OAAcA,MAG7B,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,sBAAKC,GAAG,QAAQD,UAAU,OAA1B,UACI,qBAAKC,GAAG,WAAWC,IAAKC,EAASC,IAAI,SACrC,oBAAIJ,UAAU,iBAAd,6BACA,oBAAIA,UAAU,iBAAd,sEAGJ,sBAAKC,GAAG,cAAcD,UAAU,OAAhC,UACI,cAACK,EAAA,EAAD,CACIC,MAAM,UACNL,GAAG,oBACHM,YAAY,2BACZC,MAAO5B,EACP6B,QAAQ,SACRC,KAAK,QACLC,SAlCC,SAAC1B,GAClB,IAAM2B,EAAW3B,EAAE4B,OAAOL,MAC1B3B,EAAe+B,IAiCCE,WAAS,EACTC,KAAM,EACNC,WAAY,CACRhB,UAAWtB,EAAQT,MACnBgD,kBAAkB,KAG1B,cAACZ,EAAA,EAAD,CACIC,MAAM,OACNL,GAAG,oBACHM,YAAY,QACZC,MAAO1B,EACP2B,QAAQ,SACRC,KAAK,QACLI,WAAS,EACTC,KAAM,EACNC,WAAY,CACRhB,UAAWtB,EAAQT,MACnBiD,UAAU,EACVD,kBAAkB,QAM9B,cAACE,EAAA,EAAD,CACIlB,GAAG,mBACHQ,QAAQ,YACRW,UAAU,QACVjD,MAAM,YACNuC,KAAK,QACLW,QAASrC,EANb,uBAWA,oBAAIiB,GAAG,SAASD,UAAU,sBAA1B,yBAAsD,IAAIsB,MAAOC,cAAjE,4BClGDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f74b6e29.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/yoda.299a26bf.png\";","import { Button, TextField } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport yodaPng from \"./images/yoda.png\";\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: 350,\n        height: 385,\n        maxWidth: \"85vw\",\n        marginBottom: 50,\n        padding: 10\n    },\n    input: {\n        borderRadius: \"10px\",\n        width: \"300px\",\n        color: '#FFF',\n        \"&:active, &:hover, &:focus, &:not(:hover)\": {\n            backgroundColor: \"rgba(49, 49, 49, 1)\",\n        },\n        \"&&\": {\n            marginBottom: \"50px\",\n            marginRight: \"10px\",\n            marginLeft: \"10px\",\n            paddingRight: \"10px\",\n            paddingLeft: \"10px\"\n        }\n    }\n});\n\nfunction App() {\n    const classes = useStyles();\n\n    // Hooks\n    const [englishText, setEnglishText] = useState<any>(\"\");\n    const [yodaText, setYodaText] = useState<any>(\"\");\n\n    // Text Translation\n    const handleChange = (e: any) => {\n        const userText = e.target.value;\n        setEnglishText(userText);\n    }\n\n    const executeTranslation = async (e: any) => {\n        const translatedText = await getTranslation(englishText);\n        setYodaText(translatedText);\n    };\n\n    const getTranslation = (englishText: string) => {\n        return axios\n            .post(\"/translate/yoda.json?\" + new URLSearchParams({ text: englishText }), { text: englishText })\n            .then((res: any) => res.data.contents.translated)\n            .catch((err: any) => err);\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div id=\"title\" className=\"fade\">\n                    <img id=\"yoda-img\" src={yodaPng} alt=\"Yoda\" />\n                    <h1 className=\"star-wars-font\">Yoda Translator</h1>\n                    <h2 className=\"star-wars-font\">To speak like me, write your sentence below you must.</h2>\n                </div>\n\n                <div id=\"translation\" className=\"fade\">\n                    <TextField\n                        label=\"English\"\n                        id=\"filled-size-small\"\n                        placeholder=\"Write your sentence here\"\n                        value={englishText}\n                        variant=\"filled\"\n                        size=\"small\"\n                        onChange={handleChange}\n                        multiline\n                        rows={4}\n                        InputProps={{\n                            className: classes.input,\n                            disableUnderline: true\n                        }}\n                    />\n                    <TextField\n                        label=\"Yoda\"\n                        id=\"filled-size-small\"\n                        placeholder=\"(...)\"\n                        value={yodaText}\n                        variant=\"filled\"\n                        size=\"small\"\n                        multiline\n                        rows={4}\n                        InputProps={{\n                            className: classes.input,\n                            readOnly: true,\n                            disableUnderline: true\n                        }}\n                    />\n                </div>\n\n                {/* TODO: Add a button to execute the translation, as the API has a limit of 5 requests per hour */}\n                <Button\n                    id=\"translate-button\"\n                    variant=\"contained\"\n                    component=\"label\"\n                    color=\"secondary\"\n                    size=\"large\"\n                    onClick={executeTranslation}\n                >\n                    Translate\n                </Button>\n\n                <h2 id=\"footer\" className=\"fade star-wars-font\">{`Â© ${new Date().getFullYear()} - Eduardo Silva`}</h2>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}